from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.executors.pool import ThreadPoolExecutor
import logging
import atexit

logger = logging.getLogger(__name__)

scheduler = None

def init_scheduler(app):
    """
    Inicializa o scheduler de tarefas da aplica√ß√£o
    
    Args:
        app: Inst√¢ncia da aplica√ß√£o Flask
    """
    global scheduler
    
    if scheduler is not None:
        logger.warning("‚ö†Ô∏è Scheduler j√° foi inicializado")
        return scheduler
    
    try:
        # Configura√ß√µes do scheduler
        executors = {
            'default': ThreadPoolExecutor(max_workers=2)
        }
        
        job_defaults = {
            'coalesce': True,  # Evita execu√ß√£o m√∫ltipla da mesma tarefa
            'max_instances': 1,  # M√°ximo 1 inst√¢ncia da tarefa por vez
            'misfire_grace_time': 300  # 5 minutos de toler√¢ncia para tarefas atrasadas
        }
        
        # Inicializar scheduler
        scheduler = BackgroundScheduler(
            executors=executors,
            job_defaults=job_defaults,
            timezone='UTC'
        )
        
        logger.info("üöÄ Scheduler inicializado com sucesso")
        
        # Configurar tarefas agendadas
        _configurar_tarefas_agendadas(app)
        
        # Iniciar scheduler
        scheduler.start()
        logger.info("‚ñ∂Ô∏è Scheduler iniciado com sucesso")
        
        # Registrar shutdown do scheduler ao finalizar aplica√ß√£o
        atexit.register(lambda: shutdown_scheduler())
        
        return scheduler
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar scheduler: {e}")
        raise e

def _configurar_tarefas_agendadas(app):
    """
    Configura todas as tarefas agendadas da aplica√ß√£o
    
    Args:
        app: Inst√¢ncia da aplica√ß√£o Flask
    """
    global scheduler
    
    try:
        # Tarefa de limpeza de usu√°rios expirados - a cada 5 horas
        from app.service.limpeza_usuarios_expirados import executar_limpeza_agendada
        
        scheduler.add_job(
            func=lambda: _executar_com_contexto_app(app, executar_limpeza_agendada),
            trigger=IntervalTrigger(hours=5),
            id='limpeza_usuarios_expirados',
            name='Limpeza de Usu√°rios Expirados',
            replace_existing=True
        )
        
        logger.info("‚è∞ Tarefa agendada configurada: Limpeza de usu√°rios expirados (a cada 5 horas)")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar tarefas agendadas: {e}")
        raise e

def _executar_com_contexto_app(app, funcao):
    """
    Executa uma fun√ß√£o dentro do contexto da aplica√ß√£o Flask
    
    Args:
        app: Inst√¢ncia da aplica√ß√£o Flask
        funcao: Fun√ß√£o a ser executada
    """
    try:
        with app.app_context():
            return funcao()
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar tarefa agendada: {e}")
        raise e

def adicionar_tarefa(func, trigger, job_id, name, **kwargs):
    """
    Adiciona uma nova tarefa ao scheduler
    
    Args:
        func: Fun√ß√£o a ser executada
        trigger: Trigger do APScheduler (IntervalTrigger, CronTrigger, etc.)
        job_id: ID √∫nico da tarefa
        name: Nome descritivo da tarefa
        **kwargs: Argumentos adicionais para o job
    """
    global scheduler
    
    if scheduler is None:
        logger.error("‚ùå Scheduler n√£o foi inicializado")
        return False
    
    try:
        scheduler.add_job(
            func=func,
            trigger=trigger,
            id=job_id,
            name=name,
            replace_existing=True,
            **kwargs
        )
        logger.info(f"‚úÖ Tarefa '{name}' adicionada com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao adicionar tarefa '{name}': {e}")
        return False

def remover_tarefa(job_id):
    """
    Remove uma tarefa do scheduler
    
    Args:
        job_id: ID da tarefa a ser removida
    """
    global scheduler
    
    if scheduler is None:
        logger.error("‚ùå Scheduler n√£o foi inicializado")
        return False
    
    try:
        scheduler.remove_job(job_id)
        logger.info(f"‚úÖ Tarefa '{job_id}' removida com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover tarefa '{job_id}': {e}")
        return False

def listar_tarefas():
    """
    Lista todas as tarefas agendadas
    
    Returns:
        list: Lista de informa√ß√µes das tarefas
    """
    global scheduler
    
    if scheduler is None:
        logger.error("‚ùå Scheduler n√£o foi inicializado")
        return []
    
    try:
        jobs = scheduler.get_jobs()
        tarefas = []
        
        for job in jobs:
            tarefa_info = {
                'id': job.id,
                'name': job.name,
                'next_run': job.next_run_time.isoformat() if job.next_run_time else None,
                'trigger': str(job.trigger)
            }
            tarefas.append(tarefa_info)
        
        return tarefas
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao listar tarefas: {e}")
        return []

def pausar_scheduler():
    """
    Pausa o scheduler
    """
    global scheduler
    
    if scheduler is None:
        logger.error("‚ùå Scheduler n√£o foi inicializado")
        return False
    
    try:
        scheduler.pause()
        logger.info("‚è∏Ô∏è Scheduler pausado")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao pausar scheduler: {e}")
        return False

def retomar_scheduler():
    """
    Retoma o scheduler
    """
    global scheduler
    
    if scheduler is None:
        logger.error("‚ùå Scheduler n√£o foi inicializado")
        return False
    
    try:
        scheduler.resume()
        logger.info("‚ñ∂Ô∏è Scheduler retomado")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao retomar scheduler: {e}")
        return False

def shutdown_scheduler():
    """
    Finaliza o scheduler de forma segura
    """
    global scheduler
    
    if scheduler is None:
        return
    
    try:
        scheduler.shutdown(wait=True)
        logger.info("üõë Scheduler finalizado com sucesso")
        scheduler = None
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao finalizar scheduler: {e}")

def get_scheduler():
    """
    Retorna a inst√¢ncia do scheduler
    
    Returns:
        BackgroundScheduler: Inst√¢ncia do scheduler ou None se n√£o inicializado
    """
    return scheduler